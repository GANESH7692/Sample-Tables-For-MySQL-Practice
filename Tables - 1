-- Create the table
-- SALESMEN TABLE
CREATE TABLE salesmen (
    salesman_id INT,
    name VARCHAR(50),
    city VARCHAR(50),
    commission DECIMAL(5, 2)
);

-- Insert data into the table
INSERT INTO salesmen (salesman_id, name, city, commission)
VALUES
    (5001, 'James Hoog', 'New York', 0.15),
    (5002, 'Nail Knite', 'Paris', 0.13),
    (5005, 'Pit Alex', 'London', 0.11),
    (5006, 'Mc Lyon', 'Paris', 0.14),
    (5007, 'Paul Adam', 'Rome', 0.13),
    (5003, 'Lauson Hen', 'San Jose', 0.12);


-- Create the table
-- CUSTOMERS TABLE
CREATE TABLE customers (
    customer_id INT,
    cust_name VARCHAR(50),
    city VARCHAR(50),
    grade INT,
    salesman_id INT
);

-- Insert data into the table
INSERT INTO customers (customer_id, cust_name, city, grade, salesman_id)
VALUES
    (3002, 'Nick Rimando', 'New York', 100, 5001),
    (3007, 'Brad Davis', 'New York', 200, 5001),
    (3005, 'Graham Zusi', 'California', 200, 5002),
    (3008, 'Julian Green', 'London', 300, 5002),
    (3004, 'Fabian Johnson', 'Paris', 300, 5006),
    (3009, 'Geoff Cameron', 'Berlin', 100, 5003),
    (3003, 'Jozy Altidor', 'Moscow', 200, 5007),
    (3001, 'Brad Guzan', 'London', NULL, 5005);



-- Create the table
-- ORDERS TABLE
CREATE TABLE orders (
    ord_no INT,
    purch_amt DECIMAL(8, 2),
    ord_date DATE,
    customer_id INT,
    salesman_id INT
);

-- Insert data into the table
INSERT INTO orders (ord_no, purch_amt, ord_date, customer_id, salesman_id)
VALUES
    (70001, 150.5, '2012-10-05', 3005, 5002),
    (70009, 270.65, '2012-09-10', 3001, 5005),
    (70002, 65.26, '2012-10-05', 3002, 5001),
    (70004, 110.5, '2012-08-17', 3009, 5003),
    (70007, 948.5, '2012-09-10', 3005, 5002),
    (70005, 2400.6, '2012-07-27', 3007, 5001),
    (70008, 5760, '2012-09-10', 3002, 5001),
    (70010, 1983.43, '2012-10-10', 3004, 5006),
    (70003, 2480.4, '2012-10-10', 3009, 5003),
    (70012, 250.45, '2012-06-27', 3008, 5002),
    (70011, 75.29, '2012-08-17', 3003, 5007),
    (70013, 3045.6, '2012-04-25', 3002, 5001);









-- PRACTICE QUESTIONS

1. Basic Joins:
   - Retrieve the names of all customers along with their corresponding salesman's name and city.

2. Inner Joins:
   - Display the details of customers and their corresponding salesmen, excluding any customers without a linked salesman.

3. Left Joins:
   - List all salesmen and their associated customers (if any). Include salesmen who haven't made any sales yet.

4. Right Joins:
   - Show all customers and their associated salesmen (if any). Include customers who haven't been linked to a salesman.

5. Full Outer Joins:
   - Retrieve all information about salesmen and customers, including unmatched records from both tables.

6. Join with Conditions:
   - Display customers from 'New York' along with their salesman's name and commission rate.

7. Multiple Joins:
   - Fetch the names of customers, their corresponding salesmen, and the commission rates for those salesmen.

8. Join with Aggregation:
   - Find the average grade for customers associated with each salesman.

9. Self-Join:
   - Connect customers residing in the same city and display their names along with the city name.

10. Join with NULLs:
    - List all customers along with their salesmen. Replace NULL values in the 'grade' column with 'Not graded'.



1. Basic Joins:
   - Retrieve the names of all customers along with their corresponding salesman's name and city.

2. Inner Joins:
   - Display the details of customers and their corresponding salesmen, excluding any customers without a linked salesman.

3. Left Joins:
   - List all salesmen and their associated customers (if any). Include salesmen who haven't made any sales yet.

4. Right Joins:
   - Show all customers and their associated salesmen (if any). Include customers who haven't been linked to a salesman.

5. Full Outer Joins:
   - Retrieve all information about salesmen and customers, including unmatched records from both tables.

6. Join with Conditions:
   - Display customers from 'New York' along with their salesman's name and commission rate.

7. Multiple Joins:
   - Fetch the names of customers, their corresponding salesmen, and the commission rates for those salesmen.

8. Join with Aggregation:
   - Find the average grade for customers associated with each salesman.

9. Self-Join:
   - Connect customers residing in the same city and display their names along with the city name.

10. Join with NULLs:
    - List all customers along with their salesmen. Replace NULL values in the 'grade' column with 'Not graded'.



Basic Retrieval:
1. Retrieve all customer details: names, cities, and grades.
2. Get all order details: order numbers, purchase amounts, and order dates.
3. Display details of all salesmen: names, cities, and commission rates.

Joins:
4. Join `customers` and `orders` tables to fetch customer names, order numbers, and purchase amounts.
5. Join `orders` and `salesmen` tables to get order numbers, purchase amounts, and associated salesman names.
6. Join all three tables to get customer names, order numbers, purchase amounts, and associated salesman names.

Filtering and Conditions:
7. Retrieve orders placed after '2012-08-01' with their associated customer names and salesman details.
8. Fetch customer details (names, cities) of customers from 'London' with their associated orders and purchase amounts.
9. Get orders made by customers with a grade of 200 along with their details and salesman names.

Aggregation and Grouping:
10. Calculate the total purchase amount for each customer along with their names, cities, and grades.
11. Find the average commission rate among all salesmen.
12. Calculate the total purchase amount for each city.

Sorting and Limiting:
13. Retrieve the top 5 orders based on the highest purchase amount along with their customer and salesman details.
14. Get the oldest 3 orders based on order dates along with associated customer and salesman information.

Subqueries and Complex Queries
15. Retrieve customers with the highest purchase amount and their associated orders and salesman details.
16. Find customers with no orders and display their details along with the salesman details.

NULL Handling:
17. List all orders with NULL purchase amounts and their associated customer and salesman details.
18. Display customers with no grade assigned and their orders along with salesman details.

Self-Join and Recursive Queries:
19. Connect customers residing in the same city and display their names along with the city name.
20. Display orders where the customer is also the salesman and show their details.
